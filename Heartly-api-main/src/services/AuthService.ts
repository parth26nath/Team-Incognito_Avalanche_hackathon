import { Repository } from "typeorm";
import { AppDataSource } from "../db/AppDataSource";
import { User } from "../models/User";
import { generateToken } from "../middlewares/AuthMiddleware";
import { SiweMessage } from "siwe";
import crypto from "crypto";

const userRepository: Repository<User> = AppDataSource.getRepository(User);

async function changeNonce(user: User) {
  user.nonce = crypto.randomBytes(16).toString("hex");
  await userRepository.save(user);
}

export async function requestNonce(walletAddress: string) {
  const user = await userRepository.findOne({
    where: { walletAddress },
  });
  if (!user) return;
  return user.nonce;
}

export async function verifySignature(
  walletAddress: string,
  message: string,
  signature: string,
) {
  console.log(walletAddress, message, signature);
  const siweMessage = new SiweMessage(message);

  const user = await userRepository.findOne({
    where: { walletAddress },
  });
  if (!user) {
    console.log("Couldnt find user");
    return;
  }

  const storedNonce = user.nonce;
  await changeNonce(user);
  try {
    const { data: message } = await siweMessage.verify({
      signature: signature,
      nonce: storedNonce,
    });

    const token = generateToken({
      username: user.username,
      walletAddress: user.walletAddress,
    });
    console.log("Token generated by service", token);

    return token;
  } catch (error) {
    return;
  }
}

export async function refreshToken(walletAddress: string) {
  try {
    const user = await userRepository.findOne({ where: { walletAddress } });

    if (!user) {
      throw new Error("User not found");
    }

    const newToken = generateToken({
      username: user.username,
      walletAddress: user.walletAddress,
    });

    return newToken;
  } catch (error) {
    throw new Error("Error refreshing token");
  }
}
